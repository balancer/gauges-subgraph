// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GaugeCreated extends ethereum.Event {
  get params(): GaugeCreated__Params {
    return new GaugeCreated__Params(this);
  }
}

export class GaugeCreated__Params {
  _event: GaugeCreated;

  constructor(event: GaugeCreated) {
    this._event = event;
  }

  get gauge(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OptimismGasLimitModified extends ethereum.Event {
  get params(): OptimismGasLimitModified__Params {
    return new OptimismGasLimitModified__Params(this);
  }
}

export class OptimismGasLimitModified__Params {
  _event: OptimismGasLimitModified;

  constructor(event: OptimismGasLimitModified) {
    this._event = event;
  }

  get gasLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class GnosisRootGaugeV2Factory extends ethereum.SmartContract {
  static bind(address: Address): GnosisRootGaugeV2Factory {
    return new GnosisRootGaugeV2Factory("GnosisRootGaugeV2Factory", address);
  }

  create(recipient: Address, relativeWeightCap: BigInt): Address {
    let result = super.call("create", "create(address,uint256):(address)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(relativeWeightCap)
    ]);

    return result[0].toAddress();
  }

  try_create(
    recipient: Address,
    relativeWeightCap: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall("create", "create(address,uint256):(address)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(relativeWeightCap)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getActionId(selector: Bytes): Bytes {
    let result = super.call("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);

    return result[0].toBytes();
  }

  try_getActionId(selector: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAuthorizer(): Address {
    let result = super.call("getAuthorizer", "getAuthorizer():(address)", []);

    return result[0].toAddress();
  }

  try_getAuthorizer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAuthorizer",
      "getAuthorizer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGaugeImplementation(): Address {
    let result = super.call(
      "getGaugeImplementation",
      "getGaugeImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getGaugeImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGaugeImplementation",
      "getGaugeImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOptimismGasLimit(): BigInt {
    let result = super.call(
      "getOptimismGasLimit",
      "getOptimismGasLimit():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOptimismGasLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOptimismGasLimit",
      "getOptimismGasLimit():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVault(): Address {
    let result = super.call("getVault", "getVault():(address)", []);

    return result[0].toAddress();
  }

  try_getVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isGaugeFromFactory(gauge: Address): boolean {
    let result = super.call(
      "isGaugeFromFactory",
      "isGaugeFromFactory(address):(bool)",
      [ethereum.Value.fromAddress(gauge)]
    );

    return result[0].toBoolean();
  }

  try_isGaugeFromFactory(gauge: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isGaugeFromFactory",
      "isGaugeFromFactory(address):(bool)",
      [ethereum.Value.fromAddress(gauge)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get optimismL1StandardBridge(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get optimismBal(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get gasLimit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get relativeWeightCap(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetOptimismGasLimitCall extends ethereum.Call {
  get inputs(): SetOptimismGasLimitCall__Inputs {
    return new SetOptimismGasLimitCall__Inputs(this);
  }

  get outputs(): SetOptimismGasLimitCall__Outputs {
    return new SetOptimismGasLimitCall__Outputs(this);
  }
}

export class SetOptimismGasLimitCall__Inputs {
  _call: SetOptimismGasLimitCall;

  constructor(call: SetOptimismGasLimitCall) {
    this._call = call;
  }

  get gasLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOptimismGasLimitCall__Outputs {
  _call: SetOptimismGasLimitCall;

  constructor(call: SetOptimismGasLimitCall) {
    this._call = call;
  }
}
