// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CommitOwnership extends ethereum.Event {
  get params(): CommitOwnership__Params {
    return new CommitOwnership__Params(this);
  }
}

export class CommitOwnership__Params {
  _event: CommitOwnership;

  constructor(event: CommitOwnership) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ApplyOwnership extends ethereum.Event {
  get params(): ApplyOwnership__Params {
    return new ApplyOwnership__Params(this);
  }
}

export class ApplyOwnership__Params {
  _event: ApplyOwnership;

  constructor(event: ApplyOwnership) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddType extends ethereum.Event {
  get params(): AddType__Params {
    return new AddType__Params(this);
  }
}

export class AddType__Params {
  _event: AddType;

  constructor(event: AddType) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get type_id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewTypeWeight extends ethereum.Event {
  get params(): NewTypeWeight__Params {
    return new NewTypeWeight__Params(this);
  }
}

export class NewTypeWeight__Params {
  _event: NewTypeWeight;

  constructor(event: NewTypeWeight) {
    this._event = event;
  }

  get type_id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get total_weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewGaugeWeight extends ethereum.Event {
  get params(): NewGaugeWeight__Params {
    return new NewGaugeWeight__Params(this);
  }
}

export class NewGaugeWeight__Params {
  _event: NewGaugeWeight;

  constructor(event: NewGaugeWeight) {
    this._event = event;
  }

  get gauge_address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get total_weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VoteForGauge extends ethereum.Event {
  get params(): VoteForGauge__Params {
    return new VoteForGauge__Params(this);
  }
}

export class VoteForGauge__Params {
  _event: VoteForGauge;

  constructor(event: VoteForGauge) {
    this._event = event;
  }

  get time(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get gauge_addr(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewGauge extends ethereum.Event {
  get params(): NewGauge__Params {
    return new NewGauge__Params(this);
  }
}

export class NewGauge__Params {
  _event: NewGauge;

  constructor(event: NewGauge) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get gauge_type(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GaugeController__vote_user_slopesResultValue0Struct extends ethereum.Tuple {
  get slope(): BigInt {
    return this[0].toBigInt();
  }

  get power(): BigInt {
    return this[1].toBigInt();
  }

  get end(): BigInt {
    return this[2].toBigInt();
  }
}

export class GaugeController__points_weightResultValue0Struct extends ethereum.Tuple {
  get bias(): BigInt {
    return this[0].toBigInt();
  }

  get slope(): BigInt {
    return this[1].toBigInt();
  }
}

export class GaugeController__points_sumResultValue0Struct extends ethereum.Tuple {
  get bias(): BigInt {
    return this[0].toBigInt();
  }

  get slope(): BigInt {
    return this[1].toBigInt();
  }
}

export class GaugeController extends ethereum.SmartContract {
  static bind(address: Address): GaugeController {
    return new GaugeController("GaugeController", address);
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  voting_escrow(): Address {
    let result = super.call("voting_escrow", "voting_escrow():(address)", []);

    return result[0].toAddress();
  }

  try_voting_escrow(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "voting_escrow",
      "voting_escrow():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gauge_types(_addr: Address): BigInt {
    let result = super.call("gauge_types", "gauge_types(address):(int128)", [
      ethereum.Value.fromAddress(_addr)
    ]);

    return result[0].toBigInt();
  }

  try_gauge_types(_addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gauge_types", "gauge_types(address):(int128)", [
      ethereum.Value.fromAddress(_addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gauge_relative_weight(addr: Address): BigInt {
    let result = super.call(
      "gauge_relative_weight",
      "gauge_relative_weight(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_gauge_relative_weight(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gauge_relative_weight",
      "gauge_relative_weight(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gauge_relative_weight1(addr: Address, time: BigInt): BigInt {
    let result = super.call(
      "gauge_relative_weight",
      "gauge_relative_weight(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );

    return result[0].toBigInt();
  }

  try_gauge_relative_weight1(
    addr: Address,
    time: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gauge_relative_weight",
      "gauge_relative_weight(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gauge_relative_weight_write(addr: Address): BigInt {
    let result = super.call(
      "gauge_relative_weight_write",
      "gauge_relative_weight_write(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_gauge_relative_weight_write(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gauge_relative_weight_write",
      "gauge_relative_weight_write(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gauge_relative_weight_write1(addr: Address, time: BigInt): BigInt {
    let result = super.call(
      "gauge_relative_weight_write",
      "gauge_relative_weight_write(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );

    return result[0].toBigInt();
  }

  try_gauge_relative_weight_write1(
    addr: Address,
    time: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gauge_relative_weight_write",
      "gauge_relative_weight_write(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_gauge_weight(addr: Address): BigInt {
    let result = super.call(
      "get_gauge_weight",
      "get_gauge_weight(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_get_gauge_weight(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_gauge_weight",
      "get_gauge_weight(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_type_weight(type_id: BigInt): BigInt {
    let result = super.call(
      "get_type_weight",
      "get_type_weight(int128):(uint256)",
      [ethereum.Value.fromSignedBigInt(type_id)]
    );

    return result[0].toBigInt();
  }

  try_get_type_weight(type_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_type_weight",
      "get_type_weight(int128):(uint256)",
      [ethereum.Value.fromSignedBigInt(type_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_total_weight(): BigInt {
    let result = super.call(
      "get_total_weight",
      "get_total_weight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_get_total_weight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_total_weight",
      "get_total_weight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_weights_sum_per_type(type_id: BigInt): BigInt {
    let result = super.call(
      "get_weights_sum_per_type",
      "get_weights_sum_per_type(int128):(uint256)",
      [ethereum.Value.fromSignedBigInt(type_id)]
    );

    return result[0].toBigInt();
  }

  try_get_weights_sum_per_type(type_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_weights_sum_per_type",
      "get_weights_sum_per_type(int128):(uint256)",
      [ethereum.Value.fromSignedBigInt(type_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  future_admin(): Address {
    let result = super.call("future_admin", "future_admin():(address)", []);

    return result[0].toAddress();
  }

  try_future_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("future_admin", "future_admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  n_gauge_types(): BigInt {
    let result = super.call("n_gauge_types", "n_gauge_types():(int128)", []);

    return result[0].toBigInt();
  }

  try_n_gauge_types(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("n_gauge_types", "n_gauge_types():(int128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  n_gauges(): BigInt {
    let result = super.call("n_gauges", "n_gauges():(int128)", []);

    return result[0].toBigInt();
  }

  try_n_gauges(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("n_gauges", "n_gauges():(int128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gauge_type_names(arg0: BigInt): string {
    let result = super.call(
      "gauge_type_names",
      "gauge_type_names(int128):(string)",
      [ethereum.Value.fromSignedBigInt(arg0)]
    );

    return result[0].toString();
  }

  try_gauge_type_names(arg0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "gauge_type_names",
      "gauge_type_names(int128):(string)",
      [ethereum.Value.fromSignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  gauges(arg0: BigInt): Address {
    let result = super.call("gauges", "gauges(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);

    return result[0].toAddress();
  }

  try_gauges(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("gauges", "gauges(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vote_user_slopes(
    arg0: Address,
    arg1: Address
  ): GaugeController__vote_user_slopesResultValue0Struct {
    let result = super.call(
      "vote_user_slopes",
      "vote_user_slopes(address,address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(arg0), ethereum.Value.fromAddress(arg1)]
    );

    return changetype<GaugeController__vote_user_slopesResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_vote_user_slopes(
    arg0: Address,
    arg1: Address
  ): ethereum.CallResult<GaugeController__vote_user_slopesResultValue0Struct> {
    let result = super.tryCall(
      "vote_user_slopes",
      "vote_user_slopes(address,address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(arg0), ethereum.Value.fromAddress(arg1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<GaugeController__vote_user_slopesResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  vote_user_power(arg0: Address): BigInt {
    let result = super.call(
      "vote_user_power",
      "vote_user_power(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return result[0].toBigInt();
  }

  try_vote_user_power(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vote_user_power",
      "vote_user_power(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  last_user_vote(arg0: Address, arg1: Address): BigInt {
    let result = super.call(
      "last_user_vote",
      "last_user_vote(address,address):(uint256)",
      [ethereum.Value.fromAddress(arg0), ethereum.Value.fromAddress(arg1)]
    );

    return result[0].toBigInt();
  }

  try_last_user_vote(
    arg0: Address,
    arg1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "last_user_vote",
      "last_user_vote(address,address):(uint256)",
      [ethereum.Value.fromAddress(arg0), ethereum.Value.fromAddress(arg1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  points_weight(
    arg0: Address,
    arg1: BigInt
  ): GaugeController__points_weightResultValue0Struct {
    let result = super.call(
      "points_weight",
      "points_weight(address,uint256):((uint256,uint256))",
      [
        ethereum.Value.fromAddress(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );

    return changetype<GaugeController__points_weightResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_points_weight(
    arg0: Address,
    arg1: BigInt
  ): ethereum.CallResult<GaugeController__points_weightResultValue0Struct> {
    let result = super.tryCall(
      "points_weight",
      "points_weight(address,uint256):((uint256,uint256))",
      [
        ethereum.Value.fromAddress(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<GaugeController__points_weightResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  time_weight(arg0: Address): BigInt {
    let result = super.call("time_weight", "time_weight(address):(uint256)", [
      ethereum.Value.fromAddress(arg0)
    ]);

    return result[0].toBigInt();
  }

  try_time_weight(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "time_weight",
      "time_weight(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  points_sum(
    arg0: BigInt,
    arg1: BigInt
  ): GaugeController__points_sumResultValue0Struct {
    let result = super.call(
      "points_sum",
      "points_sum(int128,uint256):((uint256,uint256))",
      [
        ethereum.Value.fromSignedBigInt(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );

    return changetype<GaugeController__points_sumResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_points_sum(
    arg0: BigInt,
    arg1: BigInt
  ): ethereum.CallResult<GaugeController__points_sumResultValue0Struct> {
    let result = super.tryCall(
      "points_sum",
      "points_sum(int128,uint256):((uint256,uint256))",
      [
        ethereum.Value.fromSignedBigInt(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<GaugeController__points_sumResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  time_sum(arg0: BigInt): BigInt {
    let result = super.call("time_sum", "time_sum(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);

    return result[0].toBigInt();
  }

  try_time_sum(arg0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("time_sum", "time_sum(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  points_total(arg0: BigInt): BigInt {
    let result = super.call("points_total", "points_total(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(arg0)
    ]);

    return result[0].toBigInt();
  }

  try_points_total(arg0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "points_total",
      "points_total(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  time_total(): BigInt {
    let result = super.call("time_total", "time_total():(uint256)", []);

    return result[0].toBigInt();
  }

  try_time_total(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("time_total", "time_total():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  points_type_weight(arg0: BigInt, arg1: BigInt): BigInt {
    let result = super.call(
      "points_type_weight",
      "points_type_weight(int128,uint256):(uint256)",
      [
        ethereum.Value.fromSignedBigInt(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );

    return result[0].toBigInt();
  }

  try_points_type_weight(
    arg0: BigInt,
    arg1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "points_type_weight",
      "points_type_weight(int128,uint256):(uint256)",
      [
        ethereum.Value.fromSignedBigInt(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  time_type_weight(arg0: BigInt): BigInt {
    let result = super.call(
      "time_type_weight",
      "time_type_weight(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );

    return result[0].toBigInt();
  }

  try_time_type_weight(arg0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "time_type_weight",
      "time_type_weight(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _voting_escrow(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Commit_transfer_ownershipCall extends ethereum.Call {
  get inputs(): Commit_transfer_ownershipCall__Inputs {
    return new Commit_transfer_ownershipCall__Inputs(this);
  }

  get outputs(): Commit_transfer_ownershipCall__Outputs {
    return new Commit_transfer_ownershipCall__Outputs(this);
  }
}

export class Commit_transfer_ownershipCall__Inputs {
  _call: Commit_transfer_ownershipCall;

  constructor(call: Commit_transfer_ownershipCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Commit_transfer_ownershipCall__Outputs {
  _call: Commit_transfer_ownershipCall;

  constructor(call: Commit_transfer_ownershipCall) {
    this._call = call;
  }
}

export class Apply_transfer_ownershipCall extends ethereum.Call {
  get inputs(): Apply_transfer_ownershipCall__Inputs {
    return new Apply_transfer_ownershipCall__Inputs(this);
  }

  get outputs(): Apply_transfer_ownershipCall__Outputs {
    return new Apply_transfer_ownershipCall__Outputs(this);
  }
}

export class Apply_transfer_ownershipCall__Inputs {
  _call: Apply_transfer_ownershipCall;

  constructor(call: Apply_transfer_ownershipCall) {
    this._call = call;
  }
}

export class Apply_transfer_ownershipCall__Outputs {
  _call: Apply_transfer_ownershipCall;

  constructor(call: Apply_transfer_ownershipCall) {
    this._call = call;
  }
}

export class Add_gaugeCall extends ethereum.Call {
  get inputs(): Add_gaugeCall__Inputs {
    return new Add_gaugeCall__Inputs(this);
  }

  get outputs(): Add_gaugeCall__Outputs {
    return new Add_gaugeCall__Outputs(this);
  }
}

export class Add_gaugeCall__Inputs {
  _call: Add_gaugeCall;

  constructor(call: Add_gaugeCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get gauge_type(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Add_gaugeCall__Outputs {
  _call: Add_gaugeCall;

  constructor(call: Add_gaugeCall) {
    this._call = call;
  }
}

export class Add_gauge1Call extends ethereum.Call {
  get inputs(): Add_gauge1Call__Inputs {
    return new Add_gauge1Call__Inputs(this);
  }

  get outputs(): Add_gauge1Call__Outputs {
    return new Add_gauge1Call__Outputs(this);
  }
}

export class Add_gauge1Call__Inputs {
  _call: Add_gauge1Call;

  constructor(call: Add_gauge1Call) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get gauge_type(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get weight(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Add_gauge1Call__Outputs {
  _call: Add_gauge1Call;

  constructor(call: Add_gauge1Call) {
    this._call = call;
  }
}

export class CheckpointCall extends ethereum.Call {
  get inputs(): CheckpointCall__Inputs {
    return new CheckpointCall__Inputs(this);
  }

  get outputs(): CheckpointCall__Outputs {
    return new CheckpointCall__Outputs(this);
  }
}

export class CheckpointCall__Inputs {
  _call: CheckpointCall;

  constructor(call: CheckpointCall) {
    this._call = call;
  }
}

export class CheckpointCall__Outputs {
  _call: CheckpointCall;

  constructor(call: CheckpointCall) {
    this._call = call;
  }
}

export class Checkpoint_gaugeCall extends ethereum.Call {
  get inputs(): Checkpoint_gaugeCall__Inputs {
    return new Checkpoint_gaugeCall__Inputs(this);
  }

  get outputs(): Checkpoint_gaugeCall__Outputs {
    return new Checkpoint_gaugeCall__Outputs(this);
  }
}

export class Checkpoint_gaugeCall__Inputs {
  _call: Checkpoint_gaugeCall;

  constructor(call: Checkpoint_gaugeCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Checkpoint_gaugeCall__Outputs {
  _call: Checkpoint_gaugeCall;

  constructor(call: Checkpoint_gaugeCall) {
    this._call = call;
  }
}

export class Gauge_relative_weight_writeCall extends ethereum.Call {
  get inputs(): Gauge_relative_weight_writeCall__Inputs {
    return new Gauge_relative_weight_writeCall__Inputs(this);
  }

  get outputs(): Gauge_relative_weight_writeCall__Outputs {
    return new Gauge_relative_weight_writeCall__Outputs(this);
  }
}

export class Gauge_relative_weight_writeCall__Inputs {
  _call: Gauge_relative_weight_writeCall;

  constructor(call: Gauge_relative_weight_writeCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Gauge_relative_weight_writeCall__Outputs {
  _call: Gauge_relative_weight_writeCall;

  constructor(call: Gauge_relative_weight_writeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Gauge_relative_weight_write1Call extends ethereum.Call {
  get inputs(): Gauge_relative_weight_write1Call__Inputs {
    return new Gauge_relative_weight_write1Call__Inputs(this);
  }

  get outputs(): Gauge_relative_weight_write1Call__Outputs {
    return new Gauge_relative_weight_write1Call__Outputs(this);
  }
}

export class Gauge_relative_weight_write1Call__Inputs {
  _call: Gauge_relative_weight_write1Call;

  constructor(call: Gauge_relative_weight_write1Call) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get time(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Gauge_relative_weight_write1Call__Outputs {
  _call: Gauge_relative_weight_write1Call;

  constructor(call: Gauge_relative_weight_write1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Add_typeCall extends ethereum.Call {
  get inputs(): Add_typeCall__Inputs {
    return new Add_typeCall__Inputs(this);
  }

  get outputs(): Add_typeCall__Outputs {
    return new Add_typeCall__Outputs(this);
  }
}

export class Add_typeCall__Inputs {
  _call: Add_typeCall;

  constructor(call: Add_typeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class Add_typeCall__Outputs {
  _call: Add_typeCall;

  constructor(call: Add_typeCall) {
    this._call = call;
  }
}

export class Add_type1Call extends ethereum.Call {
  get inputs(): Add_type1Call__Inputs {
    return new Add_type1Call__Inputs(this);
  }

  get outputs(): Add_type1Call__Outputs {
    return new Add_type1Call__Outputs(this);
  }
}

export class Add_type1Call__Inputs {
  _call: Add_type1Call;

  constructor(call: Add_type1Call) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Add_type1Call__Outputs {
  _call: Add_type1Call;

  constructor(call: Add_type1Call) {
    this._call = call;
  }
}

export class Change_type_weightCall extends ethereum.Call {
  get inputs(): Change_type_weightCall__Inputs {
    return new Change_type_weightCall__Inputs(this);
  }

  get outputs(): Change_type_weightCall__Outputs {
    return new Change_type_weightCall__Outputs(this);
  }
}

export class Change_type_weightCall__Inputs {
  _call: Change_type_weightCall;

  constructor(call: Change_type_weightCall) {
    this._call = call;
  }

  get type_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Change_type_weightCall__Outputs {
  _call: Change_type_weightCall;

  constructor(call: Change_type_weightCall) {
    this._call = call;
  }
}

export class Change_gauge_weightCall extends ethereum.Call {
  get inputs(): Change_gauge_weightCall__Inputs {
    return new Change_gauge_weightCall__Inputs(this);
  }

  get outputs(): Change_gauge_weightCall__Outputs {
    return new Change_gauge_weightCall__Outputs(this);
  }
}

export class Change_gauge_weightCall__Inputs {
  _call: Change_gauge_weightCall;

  constructor(call: Change_gauge_weightCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Change_gauge_weightCall__Outputs {
  _call: Change_gauge_weightCall;

  constructor(call: Change_gauge_weightCall) {
    this._call = call;
  }
}

export class Vote_for_gauge_weightsCall extends ethereum.Call {
  get inputs(): Vote_for_gauge_weightsCall__Inputs {
    return new Vote_for_gauge_weightsCall__Inputs(this);
  }

  get outputs(): Vote_for_gauge_weightsCall__Outputs {
    return new Vote_for_gauge_weightsCall__Outputs(this);
  }
}

export class Vote_for_gauge_weightsCall__Inputs {
  _call: Vote_for_gauge_weightsCall;

  constructor(call: Vote_for_gauge_weightsCall) {
    this._call = call;
  }

  get _gauge_addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _user_weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Vote_for_gauge_weightsCall__Outputs {
  _call: Vote_for_gauge_weightsCall;

  constructor(call: Vote_for_gauge_weightsCall) {
    this._call = call;
  }
}
