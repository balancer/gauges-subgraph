// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CommitOwnership extends ethereum.Event {
  get params(): CommitOwnership__Params {
    return new CommitOwnership__Params(this);
  }
}

export class CommitOwnership__Params {
  _event: CommitOwnership;

  constructor(event: CommitOwnership) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ApplyOwnership extends ethereum.Event {
  get params(): ApplyOwnership__Params {
    return new ApplyOwnership__Params(this);
  }
}

export class ApplyOwnership__Params {
  _event: ApplyOwnership;

  constructor(event: ApplyOwnership) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get locktime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get type(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get ts(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ts(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Supply extends ethereum.Event {
  get params(): Supply__Params {
    return new Supply__Params(this);
  }
}

export class Supply__Params {
  _event: Supply;

  constructor(event: Supply) {
    this._event = event;
  }

  get prevSupply(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class votingEscrow__lockedResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get end(): BigInt {
    return this[1].toBigInt();
  }
}

export class votingEscrow__point_historyResultValue0Struct extends ethereum.Tuple {
  get bias(): BigInt {
    return this[0].toBigInt();
  }

  get slope(): BigInt {
    return this[1].toBigInt();
  }

  get ts(): BigInt {
    return this[2].toBigInt();
  }

  get blk(): BigInt {
    return this[3].toBigInt();
  }
}

export class votingEscrow__user_point_historyResultValue0Struct extends ethereum.Tuple {
  get bias(): BigInt {
    return this[0].toBigInt();
  }

  get slope(): BigInt {
    return this[1].toBigInt();
  }

  get ts(): BigInt {
    return this[2].toBigInt();
  }

  get blk(): BigInt {
    return this[3].toBigInt();
  }
}

export class votingEscrow extends ethereum.SmartContract {
  static bind(address: Address): votingEscrow {
    return new votingEscrow("votingEscrow", address);
  }

  get_last_user_slope(addr: Address): BigInt {
    let result = super.call(
      "get_last_user_slope",
      "get_last_user_slope(address):(int128)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_get_last_user_slope(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_last_user_slope",
      "get_last_user_slope(address):(int128)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  user_point_history__ts(_addr: Address, _idx: BigInt): BigInt {
    let result = super.call(
      "user_point_history__ts",
      "user_point_history__ts(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_addr),
        ethereum.Value.fromUnsignedBigInt(_idx)
      ]
    );

    return result[0].toBigInt();
  }

  try_user_point_history__ts(
    _addr: Address,
    _idx: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "user_point_history__ts",
      "user_point_history__ts(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_addr),
        ethereum.Value.fromUnsignedBigInt(_idx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  locked__end(_addr: Address): BigInt {
    let result = super.call("locked__end", "locked__end(address):(uint256)", [
      ethereum.Value.fromAddress(_addr)
    ]);

    return result[0].toBigInt();
  }

  try_locked__end(_addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "locked__end",
      "locked__end(address):(uint256)",
      [ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(addr: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf1(addr: Address, _t: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [ethereum.Value.fromAddress(addr), ethereum.Value.fromUnsignedBigInt(_t)]
    );

    return result[0].toBigInt();
  }

  try_balanceOf1(addr: Address, _t: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [ethereum.Value.fromAddress(addr), ethereum.Value.fromUnsignedBigInt(_t)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfAt(addr: Address, _block: BigInt): BigInt {
    let result = super.call(
      "balanceOfAt",
      "balanceOfAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfAt(addr: Address, _block: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfAt",
      "balanceOfAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromUnsignedBigInt(_block)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply1(t: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(t)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply1(t: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(t)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupplyAt(_block: BigInt): BigInt {
    let result = super.call(
      "totalSupplyAt",
      "totalSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_block)]
    );

    return result[0].toBigInt();
  }

  try_totalSupplyAt(_block: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupplyAt",
      "totalSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_block)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supply(): BigInt {
    let result = super.call("supply", "supply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_supply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("supply", "supply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  locked(arg0: Address): votingEscrow__lockedResultValue0Struct {
    let result = super.call("locked", "locked(address):((int128,uint256))", [
      ethereum.Value.fromAddress(arg0)
    ]);

    return changetype<votingEscrow__lockedResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_locked(
    arg0: Address
  ): ethereum.CallResult<votingEscrow__lockedResultValue0Struct> {
    let result = super.tryCall("locked", "locked(address):((int128,uint256))", [
      ethereum.Value.fromAddress(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<votingEscrow__lockedResultValue0Struct>(value[0].toTuple())
    );
  }

  epoch(): BigInt {
    let result = super.call("epoch", "epoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epoch", "epoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  point_history(arg0: BigInt): votingEscrow__point_historyResultValue0Struct {
    let result = super.call(
      "point_history",
      "point_history(uint256):((int128,int128,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );

    return changetype<votingEscrow__point_historyResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_point_history(
    arg0: BigInt
  ): ethereum.CallResult<votingEscrow__point_historyResultValue0Struct> {
    let result = super.tryCall(
      "point_history",
      "point_history(uint256):((int128,int128,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<votingEscrow__point_historyResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  user_point_history(
    arg0: Address,
    arg1: BigInt
  ): votingEscrow__user_point_historyResultValue0Struct {
    let result = super.call(
      "user_point_history",
      "user_point_history(address,uint256):((int128,int128,uint256,uint256))",
      [
        ethereum.Value.fromAddress(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );

    return changetype<votingEscrow__user_point_historyResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_user_point_history(
    arg0: Address,
    arg1: BigInt
  ): ethereum.CallResult<votingEscrow__user_point_historyResultValue0Struct> {
    let result = super.tryCall(
      "user_point_history",
      "user_point_history(address,uint256):((int128,int128,uint256,uint256))",
      [
        ethereum.Value.fromAddress(arg0),
        ethereum.Value.fromUnsignedBigInt(arg1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<votingEscrow__user_point_historyResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  user_point_epoch(arg0: Address): BigInt {
    let result = super.call(
      "user_point_epoch",
      "user_point_epoch(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return result[0].toBigInt();
  }

  try_user_point_epoch(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "user_point_epoch",
      "user_point_epoch(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slope_changes(arg0: BigInt): BigInt {
    let result = super.call(
      "slope_changes",
      "slope_changes(uint256):(int128)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );

    return result[0].toBigInt();
  }

  try_slope_changes(arg0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slope_changes",
      "slope_changes(uint256):(int128)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  decimals(): BigInt {
    let result = super.call("decimals", "decimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimals", "decimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_smart_wallet_checker(): Address {
    let result = super.call(
      "future_smart_wallet_checker",
      "future_smart_wallet_checker():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_future_smart_wallet_checker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "future_smart_wallet_checker",
      "future_smart_wallet_checker():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  smart_wallet_checker(): Address {
    let result = super.call(
      "smart_wallet_checker",
      "smart_wallet_checker():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_smart_wallet_checker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "smart_wallet_checker",
      "smart_wallet_checker():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  future_admin(): Address {
    let result = super.call("future_admin", "future_admin():(address)", []);

    return result[0].toAddress();
  }

  try_future_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("future_admin", "future_admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get token_addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _version(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Commit_transfer_ownershipCall extends ethereum.Call {
  get inputs(): Commit_transfer_ownershipCall__Inputs {
    return new Commit_transfer_ownershipCall__Inputs(this);
  }

  get outputs(): Commit_transfer_ownershipCall__Outputs {
    return new Commit_transfer_ownershipCall__Outputs(this);
  }
}

export class Commit_transfer_ownershipCall__Inputs {
  _call: Commit_transfer_ownershipCall;

  constructor(call: Commit_transfer_ownershipCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Commit_transfer_ownershipCall__Outputs {
  _call: Commit_transfer_ownershipCall;

  constructor(call: Commit_transfer_ownershipCall) {
    this._call = call;
  }
}

export class Apply_transfer_ownershipCall extends ethereum.Call {
  get inputs(): Apply_transfer_ownershipCall__Inputs {
    return new Apply_transfer_ownershipCall__Inputs(this);
  }

  get outputs(): Apply_transfer_ownershipCall__Outputs {
    return new Apply_transfer_ownershipCall__Outputs(this);
  }
}

export class Apply_transfer_ownershipCall__Inputs {
  _call: Apply_transfer_ownershipCall;

  constructor(call: Apply_transfer_ownershipCall) {
    this._call = call;
  }
}

export class Apply_transfer_ownershipCall__Outputs {
  _call: Apply_transfer_ownershipCall;

  constructor(call: Apply_transfer_ownershipCall) {
    this._call = call;
  }
}

export class Commit_smart_wallet_checkerCall extends ethereum.Call {
  get inputs(): Commit_smart_wallet_checkerCall__Inputs {
    return new Commit_smart_wallet_checkerCall__Inputs(this);
  }

  get outputs(): Commit_smart_wallet_checkerCall__Outputs {
    return new Commit_smart_wallet_checkerCall__Outputs(this);
  }
}

export class Commit_smart_wallet_checkerCall__Inputs {
  _call: Commit_smart_wallet_checkerCall;

  constructor(call: Commit_smart_wallet_checkerCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Commit_smart_wallet_checkerCall__Outputs {
  _call: Commit_smart_wallet_checkerCall;

  constructor(call: Commit_smart_wallet_checkerCall) {
    this._call = call;
  }
}

export class Apply_smart_wallet_checkerCall extends ethereum.Call {
  get inputs(): Apply_smart_wallet_checkerCall__Inputs {
    return new Apply_smart_wallet_checkerCall__Inputs(this);
  }

  get outputs(): Apply_smart_wallet_checkerCall__Outputs {
    return new Apply_smart_wallet_checkerCall__Outputs(this);
  }
}

export class Apply_smart_wallet_checkerCall__Inputs {
  _call: Apply_smart_wallet_checkerCall;

  constructor(call: Apply_smart_wallet_checkerCall) {
    this._call = call;
  }
}

export class Apply_smart_wallet_checkerCall__Outputs {
  _call: Apply_smart_wallet_checkerCall;

  constructor(call: Apply_smart_wallet_checkerCall) {
    this._call = call;
  }
}

export class CheckpointCall extends ethereum.Call {
  get inputs(): CheckpointCall__Inputs {
    return new CheckpointCall__Inputs(this);
  }

  get outputs(): CheckpointCall__Outputs {
    return new CheckpointCall__Outputs(this);
  }
}

export class CheckpointCall__Inputs {
  _call: CheckpointCall;

  constructor(call: CheckpointCall) {
    this._call = call;
  }
}

export class CheckpointCall__Outputs {
  _call: CheckpointCall;

  constructor(call: CheckpointCall) {
    this._call = call;
  }
}

export class Deposit_forCall extends ethereum.Call {
  get inputs(): Deposit_forCall__Inputs {
    return new Deposit_forCall__Inputs(this);
  }

  get outputs(): Deposit_forCall__Outputs {
    return new Deposit_forCall__Outputs(this);
  }
}

export class Deposit_forCall__Inputs {
  _call: Deposit_forCall;

  constructor(call: Deposit_forCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Deposit_forCall__Outputs {
  _call: Deposit_forCall;

  constructor(call: Deposit_forCall) {
    this._call = call;
  }
}

export class Create_lockCall extends ethereum.Call {
  get inputs(): Create_lockCall__Inputs {
    return new Create_lockCall__Inputs(this);
  }

  get outputs(): Create_lockCall__Outputs {
    return new Create_lockCall__Outputs(this);
  }
}

export class Create_lockCall__Inputs {
  _call: Create_lockCall;

  constructor(call: Create_lockCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _unlock_time(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Create_lockCall__Outputs {
  _call: Create_lockCall;

  constructor(call: Create_lockCall) {
    this._call = call;
  }
}

export class Increase_amountCall extends ethereum.Call {
  get inputs(): Increase_amountCall__Inputs {
    return new Increase_amountCall__Inputs(this);
  }

  get outputs(): Increase_amountCall__Outputs {
    return new Increase_amountCall__Outputs(this);
  }
}

export class Increase_amountCall__Inputs {
  _call: Increase_amountCall;

  constructor(call: Increase_amountCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Increase_amountCall__Outputs {
  _call: Increase_amountCall;

  constructor(call: Increase_amountCall) {
    this._call = call;
  }
}

export class Increase_unlock_timeCall extends ethereum.Call {
  get inputs(): Increase_unlock_timeCall__Inputs {
    return new Increase_unlock_timeCall__Inputs(this);
  }

  get outputs(): Increase_unlock_timeCall__Outputs {
    return new Increase_unlock_timeCall__Outputs(this);
  }
}

export class Increase_unlock_timeCall__Inputs {
  _call: Increase_unlock_timeCall;

  constructor(call: Increase_unlock_timeCall) {
    this._call = call;
  }

  get _unlock_time(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Increase_unlock_timeCall__Outputs {
  _call: Increase_unlock_timeCall;

  constructor(call: Increase_unlock_timeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
