// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActionPerformed extends ethereum.Event {
  get params(): ActionPerformed__Params {
    return new ActionPerformed__Params(this);
  }
}

export class ActionPerformed__Params {
  _event: ActionPerformed;

  constructor(event: ActionPerformed) {
    this._event = event;
  }

  get selector(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get target(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class authorizerAdaptorEntrypoint extends ethereum.SmartContract {
  static bind(address: Address): authorizerAdaptorEntrypoint {
    return new authorizerAdaptorEntrypoint(
      "authorizerAdaptorEntrypoint",
      address
    );
  }

  canPerform(actionId: Bytes, account: Address, where: Address): boolean {
    let result = super.call(
      "canPerform",
      "canPerform(bytes32,address,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(actionId),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(where)
      ]
    );

    return result[0].toBoolean();
  }

  try_canPerform(
    actionId: Bytes,
    account: Address,
    where: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPerform",
      "canPerform(bytes32,address,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(actionId),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(where)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getActionId(selector: Bytes): Bytes {
    let result = super.call("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);

    return result[0].toBytes();
  }

  try_getActionId(selector: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAuthorizer(): Address {
    let result = super.call("getAuthorizer", "getAuthorizer():(address)", []);

    return result[0].toAddress();
  }

  try_getAuthorizer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAuthorizer",
      "getAuthorizer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAuthorizerAdaptor(): Address {
    let result = super.call(
      "getAuthorizerAdaptor",
      "getAuthorizerAdaptor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getAuthorizerAdaptor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAuthorizerAdaptor",
      "getAuthorizerAdaptor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVault(): Address {
    let result = super.call("getVault", "getVault():(address)", []);

    return result[0].toAddress();
  }

  try_getVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get adaptor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class PerformActionCall extends ethereum.Call {
  get inputs(): PerformActionCall__Inputs {
    return new PerformActionCall__Inputs(this);
  }

  get outputs(): PerformActionCall__Outputs {
    return new PerformActionCall__Outputs(this);
  }
}

export class PerformActionCall__Inputs {
  _call: PerformActionCall;

  constructor(call: PerformActionCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class PerformActionCall__Outputs {
  _call: PerformActionCall;

  constructor(call: PerformActionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
