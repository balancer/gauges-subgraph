// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateLiquidityLimit extends ethereum.Event {
  get params(): UpdateLiquidityLimit__Params {
    return new UpdateLiquidityLimit__Params(this);
  }
}

export class UpdateLiquidityLimit__Params {
  _event: UpdateLiquidityLimit;

  constructor(event: UpdateLiquidityLimit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get original_balance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get original_supply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get working_balance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get working_supply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardDistributorUpdated extends ethereum.Event {
  get params(): RewardDistributorUpdated__Params {
    return new RewardDistributorUpdated__Params(this);
  }
}

export class RewardDistributorUpdated__Params {
  _event: RewardDistributorUpdated;

  constructor(event: RewardDistributorUpdated) {
    this._event = event;
  }

  get reward_token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get distributor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RelativeWeightCapChanged extends ethereum.Event {
  get params(): RelativeWeightCapChanged__Params {
    return new RelativeWeightCapChanged__Params(this);
  }
}

export class RelativeWeightCapChanged__Params {
  _event: RelativeWeightCapChanged;

  constructor(event: RelativeWeightCapChanged) {
    this._event = event;
  }

  get new_relative_weight_cap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LiquidityGauge__reward_dataResultValue0Struct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get distributor(): Address {
    return this[1].toAddress();
  }

  get period_finish(): BigInt {
    return this[2].toBigInt();
  }

  get rate(): BigInt {
    return this[3].toBigInt();
  }

  get last_update(): BigInt {
    return this[4].toBigInt();
  }

  get integral(): BigInt {
    return this[5].toBigInt();
  }
}

export class LiquidityGauge extends ethereum.SmartContract {
  static bind(address: Address): LiquidityGauge {
    return new LiquidityGauge("LiquidityGauge", address);
  }

  transferFrom(_from: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transfer(_to: Address, _value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approve(_spender: Address, _value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(_spender: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  permit(
    _owner: Address,
    _spender: Address,
    _value: BigInt,
    _deadline: BigInt,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): boolean {
    let result = super.call(
      "permit",
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );

    return result[0].toBoolean();
  }

  try_permit(
    _owner: Address,
    _spender: Address,
    _value: BigInt,
    _deadline: BigInt,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "permit",
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(_spender: Address, _added_value: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_added_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    _spender: Address,
    _added_value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_added_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decreaseAllowance(_spender: Address, _subtracted_value: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_subtracted_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    _spender: Address,
    _subtracted_value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_subtracted_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  user_checkpoint(addr: Address): boolean {
    let result = super.call(
      "user_checkpoint",
      "user_checkpoint(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBoolean();
  }

  try_user_checkpoint(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "user_checkpoint",
      "user_checkpoint(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimed_reward(_addr: Address, _token: Address): BigInt {
    let result = super.call(
      "claimed_reward",
      "claimed_reward(address,address):(uint256)",
      [ethereum.Value.fromAddress(_addr), ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_claimed_reward(
    _addr: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimed_reward",
      "claimed_reward(address,address):(uint256)",
      [ethereum.Value.fromAddress(_addr), ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimable_reward(_user: Address, _reward_token: Address): BigInt {
    let result = super.call(
      "claimable_reward",
      "claimable_reward(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddress(_reward_token)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimable_reward(
    _user: Address,
    _reward_token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimable_reward",
      "claimable_reward(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddress(_reward_token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimable_tokens(addr: Address): BigInt {
    let result = super.call(
      "claimable_tokens",
      "claimable_tokens(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBigInt();
  }

  try_claimable_tokens(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimable_tokens",
      "claimable_tokens(address):(uint256)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  integrate_checkpoint(): BigInt {
    let result = super.call(
      "integrate_checkpoint",
      "integrate_checkpoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_integrate_checkpoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "integrate_checkpoint",
      "integrate_checkpoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_epoch_time(): BigInt {
    let result = super.call(
      "future_epoch_time",
      "future_epoch_time():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_future_epoch_time(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "future_epoch_time",
      "future_epoch_time():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inflation_rate(): BigInt {
    let result = super.call("inflation_rate", "inflation_rate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_inflation_rate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inflation_rate",
      "inflation_rate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): BigInt {
    let result = super.call("decimals", "decimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimals", "decimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRelativeWeightCap(): BigInt {
    let result = super.call(
      "getRelativeWeightCap",
      "getRelativeWeightCap():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRelativeWeightCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRelativeWeightCap",
      "getRelativeWeightCap():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCappedRelativeWeight(time: BigInt): BigInt {
    let result = super.call(
      "getCappedRelativeWeight",
      "getCappedRelativeWeight(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(time)]
    );

    return result[0].toBigInt();
  }

  try_getCappedRelativeWeight(time: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCappedRelativeWeight",
      "getCappedRelativeWeight(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(time)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxRelativeWeightCap(): BigInt {
    let result = super.call(
      "getMaxRelativeWeightCap",
      "getMaxRelativeWeightCap():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxRelativeWeightCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxRelativeWeightCap",
      "getMaxRelativeWeightCap():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(arg0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(arg0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  nonces(arg0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(arg0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lp_token(): Address {
    let result = super.call("lp_token", "lp_token():(address)", []);

    return result[0].toAddress();
  }

  try_lp_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("lp_token", "lp_token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  is_killed(): boolean {
    let result = super.call("is_killed", "is_killed():(bool)", []);

    return result[0].toBoolean();
  }

  try_is_killed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("is_killed", "is_killed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  reward_count(): BigInt {
    let result = super.call("reward_count", "reward_count():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reward_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reward_count", "reward_count():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reward_data(arg0: Address): LiquidityGauge__reward_dataResultValue0Struct {
    let result = super.call(
      "reward_data",
      "reward_data(address):((address,address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(arg0)]
    );

    return changetype<LiquidityGauge__reward_dataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_reward_data(
    arg0: Address
  ): ethereum.CallResult<LiquidityGauge__reward_dataResultValue0Struct> {
    let result = super.tryCall(
      "reward_data",
      "reward_data(address):((address,address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LiquidityGauge__reward_dataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  rewards_receiver(arg0: Address): Address {
    let result = super.call(
      "rewards_receiver",
      "rewards_receiver(address):(address)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return result[0].toAddress();
  }

  try_rewards_receiver(arg0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewards_receiver",
      "rewards_receiver(address):(address)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reward_integral_for(arg0: Address, arg1: Address): BigInt {
    let result = super.call(
      "reward_integral_for",
      "reward_integral_for(address,address):(uint256)",
      [ethereum.Value.fromAddress(arg0), ethereum.Value.fromAddress(arg1)]
    );

    return result[0].toBigInt();
  }

  try_reward_integral_for(
    arg0: Address,
    arg1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reward_integral_for",
      "reward_integral_for(address,address):(uint256)",
      [ethereum.Value.fromAddress(arg0), ethereum.Value.fromAddress(arg1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  working_balances(arg0: Address): BigInt {
    let result = super.call(
      "working_balances",
      "working_balances(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return result[0].toBigInt();
  }

  try_working_balances(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "working_balances",
      "working_balances(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  working_supply(): BigInt {
    let result = super.call("working_supply", "working_supply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_working_supply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "working_supply",
      "working_supply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  integrate_inv_supply_of(arg0: Address): BigInt {
    let result = super.call(
      "integrate_inv_supply_of",
      "integrate_inv_supply_of(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return result[0].toBigInt();
  }

  try_integrate_inv_supply_of(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "integrate_inv_supply_of",
      "integrate_inv_supply_of(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  integrate_checkpoint_of(arg0: Address): BigInt {
    let result = super.call(
      "integrate_checkpoint_of",
      "integrate_checkpoint_of(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return result[0].toBigInt();
  }

  try_integrate_checkpoint_of(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "integrate_checkpoint_of",
      "integrate_checkpoint_of(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  integrate_fraction(arg0: Address): BigInt {
    let result = super.call(
      "integrate_fraction",
      "integrate_fraction(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return result[0].toBigInt();
  }

  try_integrate_fraction(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "integrate_fraction",
      "integrate_fraction(address):(uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  period(): BigInt {
    let result = super.call("period", "period():(int128)", []);

    return result[0].toBigInt();
  }

  try_period(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("period", "period():(int128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reward_tokens(arg0: BigInt): Address {
    let result = super.call(
      "reward_tokens",
      "reward_tokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );

    return result[0].toAddress();
  }

  try_reward_tokens(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reward_tokens",
      "reward_tokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  period_timestamp(arg0: BigInt): BigInt {
    let result = super.call(
      "period_timestamp",
      "period_timestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );

    return result[0].toBigInt();
  }

  try_period_timestamp(arg0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "period_timestamp",
      "period_timestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  integrate_inv_supply(arg0: BigInt): BigInt {
    let result = super.call(
      "integrate_inv_supply",
      "integrate_inv_supply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );

    return result[0].toBigInt();
  }

  try_integrate_inv_supply(arg0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "integrate_inv_supply",
      "integrate_inv_supply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get veBoostProxy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get authorizerAdaptor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class Deposit1Call extends ethereum.Call {
  get inputs(): Deposit1Call__Inputs {
    return new Deposit1Call__Inputs(this);
  }

  get outputs(): Deposit1Call__Outputs {
    return new Deposit1Call__Outputs(this);
  }
}

export class Deposit1Call__Inputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Deposit1Call__Outputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }
}

export class Deposit2Call extends ethereum.Call {
  get inputs(): Deposit2Call__Inputs {
    return new Deposit2Call__Inputs(this);
  }

  get outputs(): Deposit2Call__Outputs {
    return new Deposit2Call__Outputs(this);
  }
}

export class Deposit2Call__Inputs {
  _call: Deposit2Call;

  constructor(call: Deposit2Call) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _claim_rewards(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class Deposit2Call__Outputs {
  _call: Deposit2Call;

  constructor(call: Deposit2Call) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class Withdraw1Call extends ethereum.Call {
  get inputs(): Withdraw1Call__Inputs {
    return new Withdraw1Call__Inputs(this);
  }

  get outputs(): Withdraw1Call__Outputs {
    return new Withdraw1Call__Outputs(this);
  }
}

export class Withdraw1Call__Inputs {
  _call: Withdraw1Call;

  constructor(call: Withdraw1Call) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _claim_rewards(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class Withdraw1Call__Outputs {
  _call: Withdraw1Call;

  constructor(call: Withdraw1Call) {
    this._call = call;
  }
}

export class Claim_rewardsCall extends ethereum.Call {
  get inputs(): Claim_rewardsCall__Inputs {
    return new Claim_rewardsCall__Inputs(this);
  }

  get outputs(): Claim_rewardsCall__Outputs {
    return new Claim_rewardsCall__Outputs(this);
  }
}

export class Claim_rewardsCall__Inputs {
  _call: Claim_rewardsCall;

  constructor(call: Claim_rewardsCall) {
    this._call = call;
  }
}

export class Claim_rewardsCall__Outputs {
  _call: Claim_rewardsCall;

  constructor(call: Claim_rewardsCall) {
    this._call = call;
  }
}

export class Claim_rewards1Call extends ethereum.Call {
  get inputs(): Claim_rewards1Call__Inputs {
    return new Claim_rewards1Call__Inputs(this);
  }

  get outputs(): Claim_rewards1Call__Outputs {
    return new Claim_rewards1Call__Outputs(this);
  }
}

export class Claim_rewards1Call__Inputs {
  _call: Claim_rewards1Call;

  constructor(call: Claim_rewards1Call) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Claim_rewards1Call__Outputs {
  _call: Claim_rewards1Call;

  constructor(call: Claim_rewards1Call) {
    this._call = call;
  }
}

export class Claim_rewards2Call extends ethereum.Call {
  get inputs(): Claim_rewards2Call__Inputs {
    return new Claim_rewards2Call__Inputs(this);
  }

  get outputs(): Claim_rewards2Call__Outputs {
    return new Claim_rewards2Call__Outputs(this);
  }
}

export class Claim_rewards2Call__Inputs {
  _call: Claim_rewards2Call;

  constructor(call: Claim_rewards2Call) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Claim_rewards2Call__Outputs {
  _call: Claim_rewards2Call;

  constructor(call: Claim_rewards2Call) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _added_value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subtracted_value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class User_checkpointCall extends ethereum.Call {
  get inputs(): User_checkpointCall__Inputs {
    return new User_checkpointCall__Inputs(this);
  }

  get outputs(): User_checkpointCall__Outputs {
    return new User_checkpointCall__Outputs(this);
  }
}

export class User_checkpointCall__Inputs {
  _call: User_checkpointCall;

  constructor(call: User_checkpointCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class User_checkpointCall__Outputs {
  _call: User_checkpointCall;

  constructor(call: User_checkpointCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class Set_rewards_receiverCall extends ethereum.Call {
  get inputs(): Set_rewards_receiverCall__Inputs {
    return new Set_rewards_receiverCall__Inputs(this);
  }

  get outputs(): Set_rewards_receiverCall__Outputs {
    return new Set_rewards_receiverCall__Outputs(this);
  }
}

export class Set_rewards_receiverCall__Inputs {
  _call: Set_rewards_receiverCall;

  constructor(call: Set_rewards_receiverCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_rewards_receiverCall__Outputs {
  _call: Set_rewards_receiverCall;

  constructor(call: Set_rewards_receiverCall) {
    this._call = call;
  }
}

export class KickCall extends ethereum.Call {
  get inputs(): KickCall__Inputs {
    return new KickCall__Inputs(this);
  }

  get outputs(): KickCall__Outputs {
    return new KickCall__Outputs(this);
  }
}

export class KickCall__Inputs {
  _call: KickCall;

  constructor(call: KickCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class KickCall__Outputs {
  _call: KickCall;

  constructor(call: KickCall) {
    this._call = call;
  }
}

export class Deposit_reward_tokenCall extends ethereum.Call {
  get inputs(): Deposit_reward_tokenCall__Inputs {
    return new Deposit_reward_tokenCall__Inputs(this);
  }

  get outputs(): Deposit_reward_tokenCall__Outputs {
    return new Deposit_reward_tokenCall__Outputs(this);
  }
}

export class Deposit_reward_tokenCall__Inputs {
  _call: Deposit_reward_tokenCall;

  constructor(call: Deposit_reward_tokenCall) {
    this._call = call;
  }

  get _reward_token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Deposit_reward_tokenCall__Outputs {
  _call: Deposit_reward_tokenCall;

  constructor(call: Deposit_reward_tokenCall) {
    this._call = call;
  }
}

export class Add_rewardCall extends ethereum.Call {
  get inputs(): Add_rewardCall__Inputs {
    return new Add_rewardCall__Inputs(this);
  }

  get outputs(): Add_rewardCall__Outputs {
    return new Add_rewardCall__Outputs(this);
  }
}

export class Add_rewardCall__Inputs {
  _call: Add_rewardCall;

  constructor(call: Add_rewardCall) {
    this._call = call;
  }

  get _reward_token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _distributor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Add_rewardCall__Outputs {
  _call: Add_rewardCall;

  constructor(call: Add_rewardCall) {
    this._call = call;
  }
}

export class Set_reward_distributorCall extends ethereum.Call {
  get inputs(): Set_reward_distributorCall__Inputs {
    return new Set_reward_distributorCall__Inputs(this);
  }

  get outputs(): Set_reward_distributorCall__Outputs {
    return new Set_reward_distributorCall__Outputs(this);
  }
}

export class Set_reward_distributorCall__Inputs {
  _call: Set_reward_distributorCall;

  constructor(call: Set_reward_distributorCall) {
    this._call = call;
  }

  get _reward_token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _distributor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Set_reward_distributorCall__Outputs {
  _call: Set_reward_distributorCall;

  constructor(call: Set_reward_distributorCall) {
    this._call = call;
  }
}

export class KillGaugeCall extends ethereum.Call {
  get inputs(): KillGaugeCall__Inputs {
    return new KillGaugeCall__Inputs(this);
  }

  get outputs(): KillGaugeCall__Outputs {
    return new KillGaugeCall__Outputs(this);
  }
}

export class KillGaugeCall__Inputs {
  _call: KillGaugeCall;

  constructor(call: KillGaugeCall) {
    this._call = call;
  }
}

export class KillGaugeCall__Outputs {
  _call: KillGaugeCall;

  constructor(call: KillGaugeCall) {
    this._call = call;
  }
}

export class UnkillGaugeCall extends ethereum.Call {
  get inputs(): UnkillGaugeCall__Inputs {
    return new UnkillGaugeCall__Inputs(this);
  }

  get outputs(): UnkillGaugeCall__Outputs {
    return new UnkillGaugeCall__Outputs(this);
  }
}

export class UnkillGaugeCall__Inputs {
  _call: UnkillGaugeCall;

  constructor(call: UnkillGaugeCall) {
    this._call = call;
  }
}

export class UnkillGaugeCall__Outputs {
  _call: UnkillGaugeCall;

  constructor(call: UnkillGaugeCall) {
    this._call = call;
  }
}

export class Claimable_tokensCall extends ethereum.Call {
  get inputs(): Claimable_tokensCall__Inputs {
    return new Claimable_tokensCall__Inputs(this);
  }

  get outputs(): Claimable_tokensCall__Outputs {
    return new Claimable_tokensCall__Outputs(this);
  }
}

export class Claimable_tokensCall__Inputs {
  _call: Claimable_tokensCall;

  constructor(call: Claimable_tokensCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Claimable_tokensCall__Outputs {
  _call: Claimable_tokensCall;

  constructor(call: Claimable_tokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _lp_token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get relative_weight_cap(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetRelativeWeightCapCall extends ethereum.Call {
  get inputs(): SetRelativeWeightCapCall__Inputs {
    return new SetRelativeWeightCapCall__Inputs(this);
  }

  get outputs(): SetRelativeWeightCapCall__Outputs {
    return new SetRelativeWeightCapCall__Outputs(this);
  }
}

export class SetRelativeWeightCapCall__Inputs {
  _call: SetRelativeWeightCapCall;

  constructor(call: SetRelativeWeightCapCall) {
    this._call = call;
  }

  get relative_weight_cap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRelativeWeightCapCall__Outputs {
  _call: SetRelativeWeightCapCall;

  constructor(call: SetRelativeWeightCapCall) {
    this._call = call;
  }
}
